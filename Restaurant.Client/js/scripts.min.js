// @koala-append "main/app.js"
// @koala-append "main/ctrl.js"
// @koala-append "main/directives.js"
// @koala-append "main/services.js"

// @koala-append "menu/app.js"
// @koala-append "menu/ctrl.js"
// @koala-append "menu/directives.js"
// @koala-append "menu/services.js"

function goBack() {
    window.history.back();
};
function getCookie(name) {
    var matches = document.cookie.match(new RegExp(
      "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
    ));
    return matches ? decodeURIComponent(matches[1]) : undefined;
}

﻿var restaurantApp = angular.module("restaurantApp", ['ngSanitize', 'ngRoute', 'ngAnimate', 'menuApp']);

restaurantApp.config(['$routeProvider', function($routeProvider) {
    $routeProvider
      .when('/start', {template: '', controller: 'getParamsCtrl'})///start?userId&pointId&reg
      .when('/home', {templateUrl: 'views/home.html'})

      .when('/club_select', {templateUrl: 'views/club_select.html'})

      .when('/club_map', {templateUrl: 'views/club_map.html'})

      .when('/about', {templateUrl: 'views/about.html'})

      .when('/chat', {templateUrl: 'views/chat.html'})
      .when('/shares', {templateUrl: 'views/shares.html'})

      .when('/news/:newsId', {templateUrl: 'views/news.html'})
      .when('/news_list', {templateUrl: 'views/news_list.html'})

      .when('/booking', {templateUrl: 'views/booking.html'})

      .when('/feedback', {templateUrl: 'views/feedback.html'})

      .when('/favorites', {templateUrl: 'views/favorites.html'})

      .when('/reviews', {templateUrl: 'views/reviews.html'})

      .when('/menu_first/:catId', {templateUrl: 'views/menu_first.html'})
      .when('/menu_next/:catId', {templateUrl: 'views/menu_next.html'})
      .when('/menu_last/:prodId', {templateUrl: 'views/menu_last.html'})
      .when('/order', {templateUrl: 'views/order.html'})
      .when('/card_payment', {templateUrl: 'views/card_payment.html'})

      .when('/error', {template: '<div style="margin-top: 100px;">Нет аккаунта бонусной карты</div>'})

      .otherwise({redirectTo: '/home'});
  }]);

restaurantApp.run(["$routeParams", "$rootScope", "$location", "$timeout", "$http", "sessionData", "userIdService", "signalRHubProxy",
  function ($routeParams, $rootScope, $location, $timeout, $http, sessionData, userIdService, signalR) {
  $rootScope.vmm = {};

  $rootScope.vmm.bonusCardUlr = sessionData.bonusCardUlr;

  userIdService.readUserId();
  if (localStorage.getItem("order") !== null) {
    sessionData.order = JSON.parse(localStorage.order);//заказ переводим из localStarage в value
  };
  if (localStorage.getItem("orderID") !== null) {
    sessionData.orderID = localStorage.orderID;//переводим ID заказа из localStarage в value
  };
  $rootScope.buttonHide = function() {
    if (localStorage.sessionId != "undefined" && localStorage.sessionId != undefined && !localStorage.getItem('agent')) {
      $rootScope.vmm.buttonHide = false;
    } else {
      $rootScope.vmm.buttonHide = true;
    };
  };
    //Синхронизация pointId и globalPoint с Local Storage
    $rootScope.vmm.globalPoint = localStorage.getItem("globalPoint");
    $rootScope.vmm.pointId = localStorage.getItem("point");


  $rootScope.vmm.userId = getCookie("userId");

    //Проверка зарегистрирован ли юзер
  $rootScope.$on( "$routeChangeSuccess", function() {



    if (localStorage.sessionId != "undefined" && localStorage.sessionId != undefined && !localStorage.getItem('agent')) {

      $rootScope.vmm.userIsNotRegistred = false;

        if (getCookie("userId") != undefined) {

        $rootScope.vmm.userId = getCookie("userId");

      }
    } else {

      if (getCookie("userId") != undefined) {

        $rootScope.vmm.userIsNotRegistred = false;

      } else {

        $location.path("/error");
        $rootScope.vmm.userIsNotRegistred = true;

      }
    };
  });

  if(!localStorage.getItem('point') && location.hash.search("/start") == -1) {//если в localStorage нет point, переадресовываем на страницу выбора клуба
    if(!localStorage.getItem('status'))//выполняется только если пользователь не администратор
      var result;
      var str = location.hash;
      var pagesWithNoPointAsk = //"проходимся" по страницам с которых не будет происходить переход на "выбор клуба"
      [
        "/admin_panel",
        "/admin_auth"
      ];
      for (var i = pagesWithNoPointAsk.length - 1; i >= 0; i--) {
        result = str.search(pagesWithNoPointAsk[i]);
        if (result !== -1) { break;} else {
          $timeout(function() {$location.path("/club_select");}, 3000);
        };
      };

  };
  $rootScope.buttonHide();
  $rootScope.$on( "$routeChangeSuccess", function() {
    $rootScope.buttonHide();
  });

  $rootScope.$on( "$routeChangeSuccess", function() {
    $http({
      method:'GET',
      url: sessionData.server + 'Club/OneClub',
      params: {
        "pointId": sessionData.clubId
      }
    }).success(function(result) {
      $rootScope.vmm.clubName = result.Rest.Name;
      $rootScope.vmm.clubNetwork = result.Rest.Network;
      $rootScope.vmm.clubAddress = result.Rest.Address;
      $rootScope.vmm.clubTelephone = result.Rest.Phone;
    });
  });
  //Получение количества бонусов
  $rootScope.$on( "$routeChangeSuccess", function() {
    $rootScope.vmm.bonusesShow = false;
    if (localStorage.sessionId != "undefined" && localStorage.sessionId != undefined && !localStorage.getItem('agent')) {
      $http({
        method:'GET',
        url: sessionData.server + 'User/GetUserBonus',
        params: {
          "sessionId": sessionData.sessionId
        }
      }).success(function(result) {
        if (result != false) {
          $rootScope.vmm.bonusesShow = true;
          $rootScope.vmm.bonuses = result;
        } else {
          $rootScope.vmm.bonusesShow = false;
        };
      }).error(function(){
        $rootScope.vmm.bonusesShow = false;
      });
    };
  });
  $rootScope.vmm.addZeroTODate = function(num) {
    num = num.toString();
    if (num.length < 2) {
        num = "0" + num;
    }
    return num;
  }
  $rootScope.vmm.bonusOverTenThousand = function() {
    if ($rootScope.vmm.bonuses > 1000) {
      var digitWithKCharacter = Math.floor($rootScope.vmm.bonuses / 1000) + "k";
      return digitWithKCharacter;
    } else {
      return $rootScope.vmm.bonuses;
    };
  }
  $rootScope.vmm.logout = function() {
    $http({
      method:"GET",
      url: sessionData.server + "User/CloseSession",
      params: {
        "sessionId" : localStorage.sessionId
      }
    }).success(function(result){
      delete localStorage.sessionId;
      delete sessionData.sessionId;
      $rootScope.vmm.buttonHide = true;
      $rootScope.vmm.userIsNotRegistred = true;
      delete localStorage.orderID;
      $location.path("/home");
    });
  }
  $rootScope.vmm.stopPropagation = function($event) {
    $event.stopPropagation();
  }
  $rootScope.go = function (path) {
    $location.path(path);
  };
  $rootScope.goForRegistred = function (path) {
    if ($rootScope.vmm.userIsNotRegistred != true) {
      $location.path(path);
    };
  };
}]);


restaurantApp.controller("chatCtrl", ["$scope", "$http", "sessionData", "$timeout", "signalRHubProxy",
  function ($scope, $http, sessionData, $timeout, signalRHubProxy) {
  var vm = this;

  vm.popupShow = true;
  if (localStorage.getItem("userName")){
    vm.popupShow = false;
  };
  vm.userChange = function() {
    if ($(".validate-error")[0] == undefined) {
      vm.errorMark = false;
      localStorage.userName = vm.userName;
      vm.popupShow = false;
    } else {
      vm.errorMark = true;
    };
  }

  vm.imagePath = sessionData.imagePath + "Photo/";
  vm.msgContent = "";
  vm.socialConnection = signalRHubProxy();

  vm.socialConnection.connection.start().done(function () {
      vm.socialConnection.social.invoke("Connect", sessionData.sessionId);
      vm.socialConnection.social.invoke("ConnectToConversation", sessionData.sessionId, sessionData.clubId);
      vm.socialConnection.social.invoke("GetMessages", sessionData.sessionId, sessionData.clubId);
      vm.socialConnection.social.invoke("UsersInChat", sessionData.sessionId, sessionData.clubId);
  });

  vm.socialConnection.social.on("onMessage", function (msg) {
      $timeout(function(){vm.scroll = true;},10)
      vm.msgs = msg;
  });
  vm.AddZeroTODate = function (num) {
      num = num.toString();
      if (num.length === 1) {
          num = "0" + num;
      }
      return num;
  };
    function htmlDecode(value) {
      return $('<div/>').html(value).text();
  }
  vm.sendMsg = function (string) {
      string = htmlDecode(string);
      $timeout(function(){vm.scroll = true;},10)
      if ($scope.vm.msgPhotoName) {
          vm.socialConnection.social.invoke("SendMessage", $scope.vm.msgPhotoName, 1, sessionData.sessionId, sessionData.clubId, localStorage.userName);
          $scope.vm.msgPhotoName = null;
      } else {
          vm.socialConnection.social.invoke("SendMessage", string, 0, sessionData.sessionId, sessionData.clubId, localStorage.userName);
          $scope.vm.msgContent = "" ;
      }
  }
  vm.socialConnection.startResponse("onConnected", function (con) {
  });
  vm.socialConnection.startResponse("sendMessages", function (msgs) {
      $timeout(function(){vm.scroll = true;},10);
      vm.msgs.push(msgs);
  });
  vm.socialConnection.startResponse("sendMessagesToCaller", function (cal) {
      vm.msgs.push(cal);
  });


}]);

restaurantApp.controller("clubSelectCtrl", ["$rootScope", "$scope", "$http", "$location", "$timeout", "sessionData", function($rootScope, $scope, $http, $location, $timeout, sessionData) {
  var vm = this;
  vm.clubClick = function(point, globalPoint, nameOfClub) {
    localStorage.setItem("point", point);
    sessionData.clubId = point;
    localStorage.setItem("pointName", nameOfClub);

    localStorage.setItem("globalPoint", globalPoint);
    $rootScope.vmm.globalPoint = globalPoint;

    window.history.back();
  };
  if (navigator.geolocation) {

    navigator.geolocation.getCurrentPosition(function(success) {
      $scope.$apply(function(){
        vm.position = success;
        $http({
          method :'GET',
          url : sessionData.server + 'Club/AllClubs',
          params : {
            "latitude" :success.coords.latitude,
            "longitude":success.coords.longitude
          }}).success(function(result) {
          vm.clubs = result.Rest;
          vm.showDistanse = true;
            ymaps.ready(init);
            function init() {
                myMap = new ymaps.Map("map", {
                    center: [success.coords.latitude, success.coords.longitude],
                    zoom: 10
                });
                var myPositionPlacemark = new ymaps.Placemark([success.coords.latitude, success.coords.longitude], {
                    hintContent: "Мое местоположение"
                }, {
                    iconImageSize: [30, 42],
                    iconImageOffset: [-3, -42]
                });
                myMap.geoObjects.add(myPositionPlacemark);
                $.each(result.Rest, function() {
                    var that = this;
                    var myPlacemark = new ymaps.Placemark([this.latitude, this.longitude], {
                        hintContent: String(this.Name),
                    }, {
                        iconLayout: 'default#image',
                        iconImageHref: 'img/balloon.png',
                        iconImageSize: [30, 42],
                        iconImageOffset: [-3, -42]
                    });
                    myMap.geoObjects.add(myPlacemark);
                });
              }
          });
      });
    }, function(error){
      vm.clubsWithOutNavigator();
    }, { frequency:5000, maximumAge: 0, timeout: 100, enableHighAccuracy:true }
    );
  } else {
    vm.clubsWithOutNavigator();
  };
  vm.clubsWithOutNavigator = function() {
    $http({
      method:'GET',
      url: sessionData.server + 'Club/AllClubs',
      params: {
      "sessionId" : sessionData.sessionId,
      "latitude" : null,
      "longitude" : null
      }
    }).success(function(result) {
      vm.clubs = result.Rest;
        function init() {
          myMap = new ymaps.Map("map", {
              center: [55.76, 37.64],
              zoom: 10
          });
          var myPositionPlacemark = new ymaps.Placemark([55.76, 37.64], {
              hintContent: "Мое местоположение"
          }, {
              iconImageSize: [30, 42],
              iconImageOffset: [-3, -42]
          });
          myMap.geoObjects.add(myPositionPlacemark);
          $.each(vm.clubs, function() {
              var that = this;
              var myPlacemark = new ymaps.Placemark([this.latitude, this.longitude], {
                  hintContent: String(this.Name),
              }, {
                  iconLayout: 'default#image',
                  iconImageHref: 'img/balloon.png',
                  iconImageSize: [30, 42],
                  iconImageOffset: [-3, -42]
              });
              myMap.geoObjects.add(myPlacemark);
          });
        }
        ymaps.ready(init);
    });
  };
  vm.functionForChat = function(PointId) {
    $http({
      method:'GET',
      url: sessionData.server + 'Chat/ConnectToConversation',
      params: {
        'pointId' : PointId,
        'sessionId' : sessionData.sessionId
      }
    }).success(function(result) {
    });
  };
}]);

restaurantApp.controller("clubMapCtrl", ["$scope", "$http", "sessionData", function($scope, $http, sessionData) {
  var vm = this;
  vm.clubClick = function(point, nameOfClub) {
    localStorage.setItem("point", point);
    sessionData.clubId = point;
    localStorage.setItem("pointName", nameOfClub);
    window.history.back();
  };
  if (navigator.geolocation) {
    //$timeout(function(){vm.clubsWithOutNavigator();}, 10000)
    navigator.geolocation.getCurrentPosition(function(success) {
      $scope.$apply(function(){
        vm.position = success;
        $http({
          method :'GET',
          url : sessionData.server + 'Club/AllClubs',
          params : {
            "latitude" :success.coords.latitude,
            "longitude":success.coords.longitude
          }}).success(function(result) {
          vm.clubs = result.Rest;
          vm.showDistanse = true;
            ymaps.ready(init);
            function init() {
                myMap = new ymaps.Map("map", {
                    center: [success.coords.latitude, success.coords.longitude],
                    zoom: 10
                });
                var myPositionPlacemark = new ymaps.Placemark([success.coords.latitude, success.coords.longitude], {
                    hintContent: "Мое местоположение"
                }, {
                    iconImageSize: [30, 42],
                    iconImageOffset: [-3, -42]
                });
                myMap.geoObjects.add(myPositionPlacemark);
                $.each(result.Rest, function() {
                    var that = this;
                    var myPlacemark = new ymaps.Placemark([this.latitude, this.longitude], {
                        hintContent: String(this.Name),
                        balloonContent: String(this.Name) + "<br>" + String(this.Address) + "<br>Расстояние до клуба: " + String(this.distance) + "<br><button class='club-id' club-id='" + this.PointId + "' club-name='" + this.Name + "'>Перейти</button>"
                    }, {
                        iconLayout: 'default#image',
                        iconImageHref: 'img/balloon.png',
                        iconImageSize: [30, 42],
                        iconImageOffset: [-3, -42]
                    });
                    myMap.geoObjects.add(myPlacemark);
                });
              }
          });
      });
    }, function(error){
      vm.clubsWithOutNavigator();
    }, { frequency:5000, maximumAge: 0, timeout: 100, enableHighAccuracy:true }
    );
  } else {
    vm.clubsWithOutNavigator();
  };
  vm.clubsWithOutNavigator = function() {
    $http({
      method:'GET',
      url: sessionData.server + 'Club/AllClubs',
      params: {
      "sessionId" : sessionData.sessionId,
      "latitude" : null,
      "longitude" : null
      }
    }).success(function(result) {
      vm.clubs = result.Rest;
        function init() {
          myMap = new ymaps.Map("map", {
              center: [55.76, 37.64],
              zoom: 10
          });
          var myPositionPlacemark = new ymaps.Placemark([55.76, 37.64], {
              hintContent: "Мое местоположение"
          }, {
              iconImageSize: [30, 42],
              iconImageOffset: [-3, -42]
          });
          myMap.geoObjects.add(myPositionPlacemark);
          $.each(vm.clubs, function() {
              var that = this;
              var myPlacemark = new ymaps.Placemark([this.latitude, this.longitude], {
                  hintContent: String(this.Name),
                  balloonContent: String(this.Name) + "<br>" + String(this.Address) + "<br>Расстояние до клуба: " + String(this.distance) + "<br><button class='club-id' club-id='" + this.PointId + "' club-name='" + this.Name + "'>Перейти</button>"
              }, {
                  iconLayout: 'default#image',
                  iconImageHref: 'img/balloon.png',
                  iconImageSize: [30, 42],
                  iconImageOffset: [-3, -42]
              });
              myMap.geoObjects.add(myPlacemark);
          });
        }
        ymaps.ready(init);
    });
  };
}]);

restaurantApp.controller("getParamsCtrl", ["$location", "$routeParams" ,"$rootScope", "userIdService", "sessionData", "$http",
  function ($location, $routeParams, $rootScope, userIdService, sessionData, $http) {
    var vm = this;
    vm.userId = $routeParams["userId"];
    vm.pointId = $routeParams["pointId"];
    userIdService.deleteUserId();

    $rootScope.vmm.globalPoint = $routeParams["pointId"];
    localStorage.setItem("globalPoint", $routeParams["pointId"]);

    userIdService.setUserId(vm.userId);

    $rootScope.vmm.spinner = true;
    $http({
      method :'GET',
      url : sessionData.server + 'Cabinet/GetSession',
      params : {
        "pointId": vm.pointId,
        "userId" : vm.userId
      }}).success(function(result) {
      $rootScope.vmm.spinner = false;

      sessionData.sessionId = result.Session;
      localStorage.sessionId = result.Session;

      localStorage.setItem("point", result.point);
      sessionData.clubId = result.point;
      $rootScope.vmm.pointId = result.point;

      $location.path("/home");
    });

  }]);

restaurantApp.controller("homeCtrl", ["$routeParams" ,"$rootScope", "$scope", "$http", "sessionData", "userIdService",
  function ($routeParams, $rootScope, $scope, $http, sessionData, userIdService) {
  var vm = this;

  $scope.sliderProportions = 0.57;
  vm.photoPath = sessionData.imagePath + "mainphoto/";
  $http({
    method:'GET',
    url: sessionData.server + 'Club/GetMainPhotos',
    params: {
      'pointId' : sessionData.clubId
    }
  }).success(function(result) {
    vm.slides = result;
    for (var i = vm.slides.length - 1; i >= 0; i--) {
      vm.slides[i] = {'pictureUrl' : vm.photoPath + vm.slides[i].Photo};
    };
  });
  $http({
    method:'GET',
    url: sessionData.server + 'Club/RestNetworkInfo',
    params: {
      'pointId':sessionData.clubId
    }
  }).success(function(result) {
    vm.clubDescription = result.ClubDescription;
  });
}]);

restaurantApp.controller("profileCtrl", [ "$scope", "$http", "sessionData", function($scope, $http, sessionData) {
  var vm = this;

  $http({
    method:'GET',
    url: sessionData.server + 'Cabinet/GetUserInfo',
    params: {
      'sessionId' : sessionData.sessionId
    }
  }).success(function(result) {
    vm.userName = result[0].Name;
    vm.userEmail = result[0].Email;
    vm.userPhone = result[0].Phone;
    vm.userPhoto = sessionData.imagePath + "photo/" + result[0].Photo;

  });
  vm.userChange = function(type) {
    if ($(".validate-error")[0] == undefined) {

      if (type == "name") {
        $http({
          method:'GET',
          url: sessionData.server + 'Cabinet/NameEdit',
          params: {
            'sessionId' : sessionData.sessionId,
            'name' : vm.userName
          }
        }).success(function(result) {
          if (result) {
            popup.popupChangeHide();
            vm.errorMark = false;
          } else {
            vm.errorMark = true;
          };
        });
      };

      if (type == "email") {
        $http({
          method:'GET',
          url: sessionData.server + 'Cabinet/EmailEdit',
          params: {
            'sessionId' : sessionData.sessionId,
            'email' : vm.userEmail
          }
        }).success(function(result) {
          if (result) {
            popup.popupChangeHide();
            vm.errorMark = false;
          } else {
            vm.errorMark = true;
          };
        });
      };

      if (type == "password") {
        $http({
          method:'GET',
          url: sessionData.server + 'Cabinet/ChangePassword',
          params: {
            'sessionId' : sessionData.sessionId,
            'oldPassword' : vm.userPasswordOld,
            'newPassword' : vm.userPasswordNew
          }
        }).success(function(result) {
          if (result) {
            popup.popupChangeHide();
            vm.errorMark = false;
          } else {
            vm.errorMark = true;
          };
        });
      };

      if (type == "phone") {
        vm.codeChangeStage = false;
        $http({
          method:'GET',
          url: sessionData.server + 'Cabinet/SendSms',
          params: {
            'phone' : vm.userPhone,
            'sessionId' : sessionData.sessionId
          }
        }).success(function(result) {
          vm.codeChangeStage = true;
        });
      };

    };
  }
  vm.popupCall = function(type){
    popup.popupChangeShow(type);
  };
  vm.popupHide = function () {
    popup.popupChangeHide();
  };
  vm.changePhone = function(){
    $http({
      method:'GET',
      url: sessionData.server + 'Cabinet/ChangePhone',
      params: {
        'code' : vm.userCode,
        'sessionId' : sessionData.sessionId,
        'newPhone' : vm.userPhone
      }
    }).success(function(result) {
      if (result) {
        popup.popupChangeHide();
        vm.errorMark = false;
        vm.codeChangeStage = false;
      } else {
        vm.errorMark = true;
      };
    });
  };
  vm.changePhoto = function() {
    var formData = new FormData();
    var file = document.getElementById("file").files[0];
    formData.append("file", file);
    $http({
      method:'POST',
      url: sessionData.server + 'Cabinet/AddUserPhoto',
      data: formData,
      headers: {'Content-Type': undefined}
    }).success(function(result) {
      vm.userPhoto = sessionData.imagePath + "photo/" + result.photo;
      $http({
        method:'get',
        url: sessionData.server + 'Cabinet/PhotoEdit',
        params: {
          'sessionId' : sessionData.sessionId,
          'photo' : result.photo
        }
      }).success(function(result) {
      });
    });
  }
}]);

restaurantApp.controller("menuCtrl", ["$rootScope", "$scope", "$location", "$http", "$routeParams", "sessionData", function($rootScope, $scope, $location, $http, $routeParams, sessionData) {
  var vm = this;
  $scope.goBack = goBack;
  $scope.$on( "$routeChangeSuccess", function() {
    $scope.clubName = localStorage.pointName;
    var str = location.hash;
    //страницы со скрытым верхним меню
    var pagesMenuHide =
    [
    //"/enter" //вернуть в апп
      "/admin_panel",
      "/admin_auth"
    ];
    for (var i = pagesMenuHide.length - 1; i >= 0; i--) {
      result = str.search(pagesMenuHide[i]);
      if (result !== -1) {$rootScope.hideMenuValue = true; break;}
      $rootScope.hideMenuValue = false;
    };
    //страницы со скрытым "бургером"
    var pagesBurgerHide =
    [

    ];
    for (var i = pagesMenuHide.length - 1; i >= 0; i--) {
      result = str.search(pagesMenuHide[i]);
      if (result !== -1) {$rootScope.vmm.hideBurgerValue = true; break;}
      $rootScope.vmm.hideBurgerValue = false;
    };
    if (localStorage.getItem("point") === null) {//если заходим в выпадайку впервые, скрываем верхнее меню
      $rootScope.vmm.hideBurgerValue = true;
    }
    //страницы с кнопкой "назад" вместо "бургера"
    var pagesMenuBack =
    [
    "/password_recovery",
    "/authorization",
    "/registration",
    "/club_map",
    "/menu_first/",
    "/menu_next",
    "/menu_last",
    "/favorites",
    "/enter",
    "/news/",
    "/order"
    ];
    for (var i = pagesMenuBack.length - 1; i >= 0; i--) {
      result = str.search(pagesMenuBack[i]);
      if (result !== -1) {$scope.backMenuValue = true; break;}
      $scope.backMenuValue = false;
    };
    //небольшой костыль для "бургера" вместо кнопки "назад"))
    var pagesMenuBurger =
    [
    "/menu_first/null"
    ];
    for (var i = pagesMenuBurger.length - 1; i >= 0; i--) {
      result = str.search(pagesMenuBurger[i]);
      if (result !== -1) {$scope.backMenuValue = false; break;}
    };
    //отключение выпадайки
    var pagesWithNoVipadaika =
    [
    "/club_map",
    "/club_select",
    "/authorization",
    "/registration"
    ];
    for (var i = pagesWithNoVipadaika.length - 1; i >= 0; i--) {
      result = str.search(pagesWithNoVipadaika[i]);
      if (result !== -1) {$scope.vipadaika = false; break;}
      $scope.vipadaika = true;
    };
    //Клик по выпадайке возвращает на предыдущий экран
    var pagesWithNoVipadaikaBack =
    [
    "/club_select"
    ];
    for (var i = pagesWithNoVipadaikaBack.length - 1; i >= 0; i--) {
      result = str.search(pagesWithNoVipadaikaBack[i]);
      if (result !== -1) {$scope.vipadaikaBack = false; break;}
      $scope.vipadaikaBack = true;
    };
    $scope.goToFromTopMenuClick = function(){

      if ($scope.vipadaikaBack == false) {
        $scope.goBack();
      }
      if ($scope.vipadaika == true) {
        $location.path("/club_select");
      }
    };
    //отключение корзины
    var pagesWithNoCart =
    [
    "/club_select",
    "/authorization",
    "/registration"
    ];
    for (var i = pagesWithNoCart.length - 1; i >= 0; i--) {
      result = str.search(pagesWithNoCart[i]);
      if (result !== -1) {$scope.cart = false; break;}
      $scope.cart = true;
    };
  });
}]);

restaurantApp.controller("sharesCtrl", ["$scope", "$http", "$routeParams", "sessionData", function($scope, $http, $routeParams, sessionData) {
  var vm = this;
  vm.imagePath = sessionData.imagePath + "article/";
    $http({
      method:'GET',
      url: sessionData.server + 'Article/Article',
      params: {
        'pointId': sessionData.clubId
      }
    }).success(function(result) {
      vm.shares = result.article;
    });
}]);

restaurantApp.controller("bonusesCtrl", ["$scope", "$http", "$routeParams", "sessionData", function($scope, $http, $routeParams, sessionData) {
  var vm = this;
  vm.ifNotAuthorized = false;
  if(!localStorage.getItem('sessionId')) {
    vm.ifNotAuthorized = true;
  };
}]);

restaurantApp.controller("reviewsCtrl", ["$scope", "$http", "$timeout", "sessionData", "customFunctions", function($scope, $http, $timeout, sessionData, customFunctions) {
  var vm = this;
  vm.maxlength = false;
  vm.review = "";
  vm.scrollPage = function (){
    customFunctions.scrollToBottomReview();
  };
  vm.scrollPageNoAnimate = function (){
    customFunctions.scrollToBottomReviewNoAnimate();
  };
  vm.refreshReviewsList = function(realRefresh){
    $http({
      method:'GET',
      url: sessionData.server + 'Cabinet/GetReviewList',
      params: {
        'pointId': sessionData.clubId
      }
    }).success(function(result) {
      vm.listOfReviews = result;
      $timeout(function(){vm.scroll = true;},10)
    });
  };
  vm.refreshReviewsList();
  vm.sendReview = function () {
    if (vm.review == "") {
      vm.noMessage = true;
    } else {
      $http({
        method:'POST',
        url: sessionData.server + 'Cabinet/SendReview',
        data: {
          'pointId': sessionData.clubId,
          'sessionId': sessionData.sessionId,
          'comment': vm.review
        }
      }).success(function(result) {
        vm.review = "";
        $timeout(function(){vm.messageSent = false;}, 3000);
        vm.messageSent = true;
        vm.refreshReviewsList(1);
      });
    };
  };
}]);

restaurantApp.controller("historyCtrl", ["$scope", "$http", "$routeParams", "sessionData", function($scope, $http, $routeParams, sessionData) {
  var vm = this;
    $http({
      method:'GET',
      url: sessionData.server + 'Cabinet/GetOrderHistory',
      params: {
        'sessionId': sessionData.sessionId
      }
    }).success(function(result) {
      vm.orders = result.orderHistory;
    });
}]);

restaurantApp.controller("bookingCtrl", ["$scope", "$http", "$timeout", "sessionData", function($scope, $http, $timeout, sessionData) {
  var vm = this;
  vm.bookingSuccess = false;
  var currentDate = new Date();
  vm.day = currentDate.getDate();
  vm.month = currentDate.getMonth() + 1;
  vm.hour = 18;
  vm.minute = 30;
  vm.comment = "";
  $http({
    method:'GET',
    url: sessionData.server + 'Cabinet/GetUserInfo',
    params: {
      'sessionId' : sessionData.sessionId
    }
  }).success(function(result) {
    vm.userPhone = result[0].Phone;
  }).error(function(){
    vm.userPhone = "";
  });
  var time = vm.hour + ':' + vm.minute;
  vm.sendReservationRequest = function(){
    if (vm.userPhone == null || vm.userPhone == "" || $(".ng-invalid").length > 0) {

      vm.noMessage = true;
    } else {
      $http({
        method:'GET',
        url: sessionData.server + 'Cabinet/ReservationTable',
        params: {
          "hour" : vm.hour,
          "minute" : vm.minute,
          "day" : vm.day,
          "month" : vm.month,
          "year" : currentDate.getFullYear(),
          "phone" : vm.userPhone,
          "people" : vm.peopleQuantity,
          "comment" : vm.comment,
          "pointId" : sessionData.clubId
        }
      }).success(function(result) {
        vm.bookingSuccess = true;
      }).error(function(){
        vm.errorPopup = true;
      });
    };
  };

}]);

restaurantApp.controller("feedbackCtrl", ["$scope", "$http", "$timeout", "sessionData", function($scope, $http, $timeout, sessionData) {
  var vm = this;
  vm.noMessage = false;
  vm.messageSent = false;
  vm.comment = "";
  $http({
    method:'GET',
    url: sessionData.server + 'Cabinet/GetUserInfo',
    params: {
      'sessionId' : sessionData.sessionId
    }
  }).success(function(result) {
    vm.userPhone = result[0].Phone;
    vm.userEmail = result[0].Email;
  }).error(function(){
    vm.userPhone = "";
    vm.userEmail = "";
  });
  vm.sendFeedback = function(){

    if (vm.comment == "" || vm.userPhone == "" || vm.userEmail == "") {
      vm.noMessage = true;
    } else {

      $http({
        method:'POST',
        url: sessionData.server + 'Cabinet/LeaveFeedback',
        data: {
          'pointId' : sessionData.clubId,
          'phone' : vm.userPhone,
          'email' : vm.userEmail,
          'comment' : vm.comment
        }
      }).success(function(result) {
        vm.messageSent = true;
      });
    };
  };
}]);

restaurantApp.controller("newsListCtrl", ["$scope", "$http", "sessionData", function($scope, $http, sessionData) {
  var vm = this;
  $http({
    method:'GET',
    url: sessionData.server + 'News/News',
    params: {
      'pointId' : sessionData.clubId
    }
  }).success(function(result) {
    vm.news = result;
  });
}]);

restaurantApp.controller("newsCtrl", ["$scope", "$http", "$routeParams", "sessionData",
  function($scope, $http, $routeParams, sessionData) {
  var vm = this;
  vm.imagePath = sessionData.imagePath + "news/";
  $scope.$on("$routeChangeSuccess", function () {
    var newsId = $routeParams["newsId"];
    $http({
      method:'GET',
      url: sessionData.server + 'News/OneNews',
      params: {
        'newsId' : newsId
      }
    }).success(function(result) {
      vm.newsName = result.Name;
      vm.newsDescription = result.Description;
      vm.newsImage = result.Image;
    });
  });
}]);

restaurantApp.controller("bottomMenuCtrl", ["$rootScope", "$scope", "$http", "$routeParams", "sessionData", "$location", function($rootScope, $scope, $http, $routeParams, sessionData, $location) {
  var vm = this;
  $scope.goBack = goBack;
  vm.Name = $scope.clubName;
  vm.goToChat = function(){
      $location.path("/chat");
  };
  $scope.$on( "$routeChangeSuccess", function() {
    $scope.clubName = localStorage.pointName;
    var str = location.hash;
    var pagesBottomMenuHide =
    [
      "/enter",
      "/registration",
      "/admin_panel",
      "/admin_auth",
      "/authorization"
    ];
    for (var i = pagesBottomMenuHide.length - 1; i >= 0; i--) {
      result = str.search(pagesBottomMenuHide[i]);
      if (result !== -1) {$rootScope.vmm.hideBottomMenuValue = true; break;}
      $rootScope.vmm.hideBottomMenuValue = false;
    };
    if (localStorage.getItem("point") === null) {//если заходим в выпадайку впервые, скрываем нижнее меню
      $rootScope.vmm.hideBottomMenuValue = true;
    }
  });
}]);

restaurantApp.controller("aboutCtrl", ["$scope", "$http", "$routeParams", "sessionData", function($scope, $http, $routeParams, sessionData) {
  var vm = this;
  vm.slides = [];
  $scope.sliderProportions = 0.57;
    $http({
      method:'GET',
      url: sessionData.server + 'Club/RestNetworkInfo',
      params: {
        'pointId':sessionData.clubId
      }
    }).success(function(result) {
      vm.ClubDescription = result.ClubDescription;
      vm.address = result.ClubAddress;
      vm.workingHours = result.WorkTime;
      vm.phone = result.ClubTelephone;
      vm.email = result.Email;
      for (var i = result.Photos.length - 1; i >= 0; i--) {
        vm.slides[i] = {'pictureUrl' : sessionData.imagePath + 'gallery/' + result.Photos[i].PhotoName};
      };
    });
}]);


restaurantApp.controller("downloadAppCtrl", ["$scope", "$http", "$routeParams", "sessionData", function($scope, $http, $routeParams, sessionData) {
  var vm = this;
}]);


restaurantApp.directive('theLastSlideScript', function() {
    return function(scope) {
        if (scope.$last) {
            function sliderOnMain(sliderProportions) {
                jQuery(function($) {
                    $(".touchslider").touchSlider({ mouseTouch: true, autoplay: true, delay: 5000 });
                });
                $(document).ready(function() {
                    var width = parseInt($(".slider").css("width"));
                    $(".slider").css("height", width * sliderProportions * 1.2 + "px");
                    var height = Math.round((width * sliderProportions)) + "px";
                    $(".touchslider-item").css("width", width + "px");
                    $(".touchslider-item").css("height", height);
                    $(".touchslider-item").parent().css("height", height);
                    $(".touchslider-viewport").css("height", height);
                    $(".touchslider1").css("height", height);
                });
            }
            sliderOnMain(scope.sliderProportions);
        }
    };
});
restaurantApp.directive('myMaxlength', ['$compile', function($compile) {
  return {
    restrict: 'A',
    scope: {},
    require: 'ngModel',
    link: function (scope, elem, attrs, ctrl) {
      attrs.$set("ngTrim", "false");
              var maxlength = parseInt(attrs.myMaxlength, 10);
              ctrl.$parsers.push(function (value) {
                  if (value.length > maxlength)
                  {
                      scope.$parent.vm.maxlength = true;
                      value = value.substr(0, maxlength);
                      ctrl.$setViewValue(value);
                      ctrl.$render();
                  }
                  return value;
              });
    }
  };
}]);
restaurantApp.directive('contenteditable', ['$sce', function($sce) {
  return {
    restrict: 'A', // only activate on element attribute
    require: '?ngModel', // get a hold of NgModelController
    link: function(scope, element, attrs, ngModel) {
      if (!ngModel) return; // do nothing if no ng-model
      // Specify how UI should be updated
      ngModel.$render = function() {
        element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
      };
      // Listen for change events to enable binding
      element.on('blur keyup change', function() {
        scope.$evalAsync(read);
      });
      read(); // initialize
      // Write data to the model
      function read() {
        var html = element.html();
        // When we clear the content editable the browser leaves a <br> behind
        // If strip-br attribute is provided then we strip this out
        if ( attrs.stripBr && html == '<br>' ) {
          html = '';
        }
        ngModel.$setViewValue(html);
      }
    }
  };
}]);
//restaurantApp.directive('myMaxlengthDiv', ['$compile', function($compile) {
//  return {
//    restrict: 'A',
//    scope: {},
//    require: 'ngModel',
//    link: function (scope, elem, attrs, ctrl) {
//      var maxlength = parseInt(attrs.myMaxlengthDiv, 10);
//
//      //binding keyup/down events on the contenteditable div
//      function check_charcount(content_id, max, e)
//      {
//          if(e.which != 8 && $(elem).text().length > maxlength)
//          {
//             // $('#'+content_id).text($('#'+content_id).text().substring(0, maxlength));
//             e.preventDefault();
//          }
//      }
//      $(elem).keyup(function(e){ check_charcount(elem, maxlength, e); });
//      $(elem).keydown(function(e){ check_charcount(elem, maxlength, e); });
//    }
//  };
//}]);
restaurantApp.directive('popupCloseAble', function() {//Закрытие поп-апа кликом по пустому месту
    return {
        restrict: 'A',
        scope: {
          ngShowModel :'=ngShow'
        },
        link: function ($scope, $element, $attrs) {
            $($element).on("click", function(){
              $scope.ngShowModel = false;
              $scope.$apply();
            });
            $($element).find("*").on("click", function(e){
              e.stopPropagation();
            });
        }
    };
});
restaurantApp.directive('spinner', function() {
    return {
      restrict: 'E',
      templateUrl: 'views/modules/spinner.html',
      replace: true
    }
});
restaurantApp.directive('myDirective', ['httpPostFactory', function (httpPostFactory) {
    return {
        restrict: 'A',
        scope: {},
        link: function (scope, element, attr) {
            element.bind('change', function () {
                var formData = new FormData();
                formData.append('file', element[0].files[0]);
                httpPostFactory('Chat/AddMessagePhoto', formData, function (callback) {
                    scope.$parent.vm.msgPhotoName = callback.photo;
                });
            });

        }
    };
}]);

restaurantApp.directive('topMenu', function() {
    return {
        restrict: "E",
        replace: true,
        templateUrl: 'views/modules/topmenu.html',
        link: function($scope, $element, $attrs) {
        }
    }
});

restaurantApp.directive('bottomMenu', function() {
    return {
        restrict: "E",
        replace: true,
        templateUrl: 'views/modules/bottommenu.html',
        link: function($scope, $element, $attrs) {
        }
    }
});
restaurantApp.directive('inputJumpNext', function() {
    return {
        restrict: "A",
        replace: false,
        link: function($scope, $element, $attrs) {
          $($element).keyup(function(){
              if(this.value.length==$(this).attr("maxlength")){
                  $(this).next().focus();
              }
          });
        }
    }
});
restaurantApp.directive('inputValidate', [ "validationService", function(validationService) {
    return {
        restrict: "E",
        replace: true,
        link: function($scope, $element, $attrs) {

            $element.append($("<div>", {"class" : "validate-sign", html: "Ошибка"}));
            $($element).find("input").on("blur", function(){
              validationService.validateFunction(this);
            })
        }
    }
}]);
restaurantApp.directive('sideMenu', ['sessionData', function(sessionData) {
    return {
        restrict: "E",
        replace: true,
        templateUrl: 'views/modules/sidemenu.html',
        link: function($scope, $element, $attrs) {
          $(function menuToggle() {
            $scope.bonusCardUrl = sessionData.bonusCardUrl;
              var sidebar = $("#sidebar");
              var sidebarInnerBlock = $("#sidebar").find(".nav");
              var sidebarWidth = (parseInt(sidebar.css("width")) * -1);
              var shade = $(".shade");
              $(window).on("resize", function(){
                sidebarWidth = (parseInt(sidebar.css("width")) * -1);
                sidebar.css("transform", "translateX(" + sidebarWidth + "px)");
              });

              var sidebarHide = function(){
                sidebar.removeClass("show");
                shade.removeClass("show");
                sidebar.css("transform", "translateX(" + sidebarWidth + "px)");
                sidebar.css("-webkit-transform", "translateX(" + sidebarWidth + "px)");
                sidebarCurrentPosition = sidebarWidth;
                $(".nav").scrollTop(0);
              }
              sidebarHide();

              var sidebarShow = function(){
                sidebar.addClass("transition");
                sidebar.css("transform", "");
                sidebar.css("-webkit-transform", "");
                sidebar.addClass("show");
                shade.addClass("show");
                sidebarCurrentPosition = 0;
              }

              $(document).on("click", ".wrap", function () {
                if ($($element).hasClass("show")) {
                  sidebarHide();
                }
              });
              $(document).on("click", ".wrap li", function () {
                if ($($element).hasClass("show")) {
                  sidebarHide();
                }
              });
              $(document).on("click", "#sidebar", function (e) {
                e.stopPropagation();
              });
              $(document).on("click", ".menu", function (e) {
                e.stopPropagation();
                if ($($element).hasClass("show")) {
                  sidebarHide();
                } else {
                  sidebarShow();
                };
              });
              $(document).on("click", ".link-logout", function (e) {
                e.stopPropagation();
              });
              $(document).on("click", ".nav .disabled", function (e) {
                e.stopPropagation();
              });
              var myElement = document.getElementById("sidebar");
              var hammertime = new Hammer(myElement);
              var style = window.getComputedStyle($('#sidebar').get(0));  // Need the DOM object
              hammertime.on('pan', function(ev) {
                if (!sidebar.hasClass("show")) {
                  sidebar.removeClass("transition");
                  var currentOffset = sidebar.css("transform");
                  var offsetValue = ev.deltaX + sidebarCurrentPosition;
                  sidebar.css("transform", "translateX(" + offsetValue + "px)");
                  sidebar.css("-webkit-transform", "translateX(" + offsetValue + "px)");
                  if (ev.deltaX > 50) {
                    shade.addClass("show");
                  };
                };
                if (sidebar.hasClass("show")) {//если меню открыто, нужно запертить ему двигаться дальше вправо
                  if (ev.deltaX < -30) {
                    console.log();
                    sidebar.removeClass("transition");
                    var currentOffset = sidebar.css("transform");
                    var offsetValue = ev.deltaX + sidebarCurrentPosition;
                    sidebar.css("transform", "translateX(" + offsetValue + "px)");
                    sidebar.css("-webkit-transform", "translateX(" + offsetValue + "px)");
                  };
                };
              });
              hammertime.on('panend', function(ev) {
                sidebar.css("transform", "");
                sidebar.addClass("transition");
                if (ev.deltaX > 30) {
                  //show menu
                  sidebarShow();
                }
                if (ev.deltaX <= -70) {
                  //hide menu
                  sidebarHide();
                }
              });

          });
        }
    }
}]);

restaurantApp.directive('popupBlock', [ "validationServiсe", function(validationServiсe) {
    return {
        restrict: "E",
        replace: true,
        templateUrl: 'views/modules/popup_block.html',
        link: function($scope, $element, $attrs) {

        }
    }
}]);

restaurantApp.directive('button', [ function() {
    return {
        restrict: "C",
        link: function($scope, $element) {
            $($element).on("mousedown", function(){
                $(this).addClass("tap");
            });
            $($element).on("mouseup", function(){
                var that = this;
                setTimeout(function() {$(that).removeClass("tap")}, 500);
            });
        }
    }
}]);
//restaurantApp.directive('contenteditable', function () {
//    return {
//        require: 'ngModel',
//        link: function (scope, element, attrs, ctrl) {
//            // view -> model
//            element.bind('blur', function () {
//                scope.$apply(function () {
//                    ctrl.$setViewValue(element.text());
//                });
//            });
//
//            // model -> view
//            ctrl.$render = function () {
//                element.text(ctrl.$viewValue);
//            };
//
//            // load init value from DOM
//            ctrl.$setViewValue(element.text());
//        }
//    };
//});
//fitnessView.directive('theLastSlideScript', function(vm) {
//  return function(scope) {
//    if (scope.$last){
//      sliderOnMain(scope.sliderProportions);
//      function sliderOnMain(sliderProportions) {
//        jQuery(function ($) {
//            $(".touchslider").touchSlider({ mouseTouch: true, autoplay: true, delay: 5000 });
//        });
//        $(document).ready(function () {
//            var width = parseInt($(".picture").css("width"));
//            $(".picture").css("height", width * sliderProportions * 1.2 +"px");
//            var height = Math.round((width * sliderProportions)) + "px";
//            $(".touchslider-item").css("width", width + "px");
//            $(".touchslider-item").css("height", height);
//            $(".touchslider-item").parent().css("height", height);
//            $(".touchslider-viewport").css("height", height);
//            $(".touchslider1").css("height", height);
//        });
//      }
//    }
//  };
//})
//
restaurantApp.directive('autoscroll', [ function() {
    return {
      restrict: 'A',
      scope: {
        autoscroll: '='
      },
      link: function($scope, $element) {
        $scope.$watch(function() { return $scope.autoscroll; }, function(newValue) {
          if (newValue) {
            var height = parseInt($($element)[0].scrollHeight);
            $($element).animate({scrollTop:9999999}, 1000);
            $scope.$evalAsync(function() {
              $scope.autoscroll = null;
            });
          }
        })
      }
    };
  }
]);

restaurantApp.value('sessionData', {
  "userId" : null,
  "sessionId" : localStorage.sessionId,
  "server" : "http://anton.intouchclub.ru/RestWeb/",
  "clubId" : localStorage.point,
  "imagePath" : "http://anton.intouchclub.ru/Content/Restaurant/",
  "order": [],
  "bonuses" : 0,
  "SocialServer": "http://anton.intouchclub.ru/SocRest/signalr",
  "HubName": "restHub",
  "bonusCardUrl": "http://artem.intouchclub.ru/BonusCard"
});

restaurantApp.service("userIdService", ['$rootScope', 'sessionData', function ($rootScope, sessionData) {
  return {
    "setUserId": function(id){
      document.cookie = "userId=" + id + "; expires=Tue, 19 Jan 2038 03:14:07 GMT";
    },
    "checkUserId": function(){

    },
    "readUserId": function(){
      sessionData.userId = getCookie("userId")
    },
    "deleteUserId": function(){
      document.cookie = "userId=; expires=";
    }
  };
}]);

restaurantApp.service('validationService', function(){

  var parentObj = {
    validateFormsForced : function(){
      $("input-validate").each(function(){
        $(this).append($("<div>", {"class" : "validate-sign", html: "Ошибка"}));
        parentObj.validateFunction($(this).find("input")[0]);
      });
    },
    validateFunction : function(elem){
      var x = $(elem).val();
      var inputReg = $(elem).closest("input-validate");
      var validatePattern = /./;
      if (elem.getAttribute("type") == "text")   {validatePattern = /./};
      if (elem.getAttribute("type") == "password")   {validatePattern = /./};
      if (elem.getAttribute("type") == "email")  {validatePattern = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,6})+$/};
      if (elem.getAttribute("type") == "number") {validatePattern = /^\d+$/};
      //if (elem.getAttribute("type") == "tel") {validatePattern = /^(\+7|7|8|\+8)(9)[0-9]{9}$/};
      if (elem.getAttribute("type") == "tel") {validatePattern = /./};
      if (validatePattern.test(x) == false) {
        inputReg.removeClass("validate-ok");
        inputReg.addClass("validate-error");
      } else {
        inputReg.addClass("validate-ok");
        inputReg.removeClass("validate-error");
      }
      var previous = elem.getAttribute("data-confirmID");
      if (previous != undefined) {//если проверяем совпадение паролей
        var previousInput = $("#" + previous)[0];
        if (previousInput.getAttribute("type") == "password")   {
            var previousVal = $(previousInput).val();
          if (x !== previousVal) {
            inputReg.removeClass("validate-ok");
            inputReg.addClass("validate-error");
            inputReg.find(".validate-sign").html("Не совпадает");
              return false;
          } else {
            inputReg.addClass("validate-ok");
            inputReg.removeClass("validate-error");
          }
        };
      };
    }
  };
  return parentObj;
});

restaurantApp.service('popup', [function(){

  var parentObj = {
    popupChangeShow : function(type){
      $("form").on("click", function(e){
        e.stopPropagation();
      });
      $(".popup-change").fadeIn();
      if (type == "name") {$(".change-name").show();};
      if (type == "email") {$(".change-email").show();};
      if (type == "password") {$(".change-password").show();};
      if (type == "phone") {$(".change-phone").show();};
    },

    popupChangeHide : function(){
      $(".popup-change").fadeOut(function(){
        $(".popup-change > form").hide();
      });

    },
    "popupShow": function(){
      $("form").on("click", function(e){
        e.stopPropagation();
      });
    },
    "checkValid": function(type) {
      if ($(".validate-error")[0] == undefined) {
        return true;
      };
    }
  };
  return parentObj;
}]);
restaurantApp.factory('httpPostFactory', ['$http', 'sessionData', function ($http, sessionData) {
    return function (file, data, callback) {
        $http({
            url: sessionData.server + file,
            method: "POST",
            data: data,
            headers: {'Content-Type': undefined}
        }).success(function (response) {
            callback(response);
        });
    };
}]);

restaurantApp.service("signalRHubProxy", ['$rootScope', 'sessionData', function ($rootScope, sessionData) {
    function signalRHubProxyService() {
        var connection = $.hubConnection(sessionData.SocialServer);
        var proxy = connection.createHubProxy(sessionData.HubName);
        proxy.on("ontest", function () {
            console.log("нет сессии!");
        });
        connection.start().done(function(){

        });

        return {
            social: proxy,
            connection: connection,

            startResponse: function (eventName, callback) {
                proxy.on(eventName, function (result) {
                    $rootScope.$apply(function () {
                        if (callback) {
                            callback(result);
                        }
                    });
                });
            },
            endResponse: function (eventName) {
                proxy.off(eventName);
            },
            response: function(eventName, callback) {
                proxy.off(eventName);
                proxy.on(eventName, function (result) {
                    $rootScope.$apply(function () {
                        if (callback) {
                            callback(result);
                        }
                    });
                });
            }
        };
    };
    return signalRHubProxyService;
}]);

restaurantApp.service('customFunctions', function(){

  var parentObj = {
    "scrollToBottom" : function(){
      $('.page div').animate({ scrollTop: $('.page div')[0].scrollHeight }, 1000);
    },
    "scrollToTop" : function(){
        $('.page div').animate({ scrollTop: 0}, 1000);
    }
  };
  return parentObj;
});


﻿var menuApp = angular.module("menuApp", ['ngAnimate']);

/*var fitnessApp = angular.module("fitnessApp", ['ngRoute', 'ngAnimate', 'fitnessView']);

fitnessApp.config(['$routeProvider', function($routeProvider) {
    $routeProvider
      .when('/about', {templateUrl: 'views/about.html', controller: 'aboutPageCtrl'})
      .when('/personnel_categories/', {templateUrl: 'views/personnel_categories.html', controller: 'personnelCategoriesCtrl'})
      .when('/personnel/:id', {templateUrl: 'views/personnel.html', controller: 'personnelCtrl'})
      .when('/news', {templateUrl: 'views/news.html', controller: "newsListCtrl"})
      .when('/article/:id', {templateUrl: 'views/article.html', controller: "articleCtrl"})
      .when('/events', {templateUrl: 'views/events.html', controller: "eventsListCtrl"})
      .when('/event/:id', {templateUrl: 'views/event.html', controller: "eventCtrl"})
      .when('/members', {templateUrl: 'views/people.html'})
      .when('/chat', {templateUrl: 'views/chat.html'})
      .when('/privileges', {templateUrl: 'views/privileges.html'})
      .when('/feedback', {templateUrl: 'views/feedback.html'})
      .when('/messages', {templateUrl: 'views/messages.html'})
      .when('/club_select', {templateUrl: 'views/club_select.html', controller: 'clubSelectCtrl'})
      .when('/club_page', {templateUrl: 'views/club_page.html'})
      .when('/authorization', {templateUrl: 'views/authorization.html'})
      .when('/registration', {templateUrl: 'views/registration.html'})
      .when('/registration_club_choice', {templateUrl: 'views/registration_club_choice.html', controller:'registrationClubChoiceCtrl'})
      .when('/club_list', {templateUrl: 'views/club-list.html'})
      .otherwise({redirectTo: '/authorization'});
  }]);

var fitnessView = angular.module('fitnessView', ['ngResource']);


//testing of servises
fitnessView.factory('foo', function() {
  return "asdffds"
});*/



menuApp.run(["$rootScope", "$location", "$http", "$interval", "menuData", "sessionData", "signalRHubProxy", function ($rootScope, $location, $http, $interval, menuData, sessionData, signalRHubProxy) {
  $rootScope.vmMenu = {};
  $rootScope.vmMenu.imagePath = sessionData.imagePath + "icons/menu/";
  //Функция запускает интервальную проверку наличия неподтвержденных заказов. При подтверждении официантом — vmMenu.hasOpenOrder = false;
  $rootScope.vmMenu.waitingForOrderConfirm = function() {
    $rootScope.vmMenu.hasOpenOrder = false;
    var stopTime = $interval(function() {
    $http({
      method:'GET',
      url: sessionData.server + 'Order/ActiveInactive',
      params: {
        "sessionId" : sessionData.sessionId
      }
    }).success(function(result) {
      if (result == true) {
        $interval.cancel(stopTime);
        $rootScope.vmMenu.hasOpenOrder = false;
      } else {
        $rootScope.vmMenu.hasOpenOrder = true;
      }
    }).error(function(){
        $interval.cancel(stopTime);
        $rootScope.vmMenu.hasOpenOrder = false;
    });
    }, 10000);
  };
  $rootScope.vmMenu.waitingForOrderConfirm();
  //Функции отображения корзины
  $rootScope.vmMenu.toggleCartBadge = function() {

    var amountOfItemsIncart = 0;
    for (var i = sessionData.order.length - 1; i >= 0; i--) {
      amountOfItemsIncart += parseInt(sessionData.order[i].Quantity);
    }
    $rootScope.vmMenu.orderLength = amountOfItemsIncart;
    if ($rootScope.vmMenu.orderLength > 0) {
      $rootScope.vmMenu.badgeShow = true;
    } else {
      $rootScope.vmMenu.badgeShow = false;//убираем бейджик с корзины
    };
  };
  $rootScope.$on( "$routeChangeSuccess", function() {
    $rootScope.vmMenu.toggleCartBadge();
  });
  $rootScope.vmMenu.toggleCartBadge();

  $rootScope.vmMenu.changeAmount = function($event, state, productId, quantity, index) {
    var input = $($event.currentTarget).closest(".quantity").find("input");
    var item = $($event.currentTarget).closest(".cart-item");
    if(state == "+"){
      var number = $rootScope.vmMenu.quantityRepeat[index];
      ++number;
      $rootScope.vmMenu.quantityRepeat[index] = number;
      input.val(number)
    }
    if(state == "-"){
      var number = $rootScope.vmMenu.quantityRepeat[index];
      if (number > 1) {
        number--;
        $rootScope.vmMenu.quantityRepeat[index] = number;
        input.val(number)
      } else {
        number--;
        $rootScope.vmMenu.quantityRepeat[index] = number;
        input.val(number)
        item.remove();
        if (sessionData.order.length == 1) {$rootScope.vmMenu.ifNoOrder = true}
      };
    }
    $rootScope.vmMenu.refreshOrderList($event, productId);
  }


  $rootScope.vmMenu.refreshOrderList = function($event) {

    sessionData.order = [];
    localStorage.order = "";

    $(".cart-item").each(function(){
      var quantity = $(this).find(".cart-count-number").val();
      var productId = $(this).find("input[type=hidden]").attr("data-productId");
      sessionData.order.push({ 'ProductId': productId, 'Quantity': quantity });
    });
    var str = JSON.stringify(sessionData.order);
    localStorage.order = str;
    $rootScope.vmMenu.toggleCartBadge();
  };

  $rootScope.vmMenu.addToOrderList = function($event, productId, quantity) {
    $event.stopPropagation();
    var repeats = false;//флаг повторов на "false"
    for (var i = sessionData.order.length - 1; i >= 0; i--) {
      for (key in sessionData.order[i]) {
        if (sessionData.order[i].ProductId == productId) {
          var currentQuantity = parseInt(sessionData.order[i].Quantity);
          sessionData.order[i] = { 'ProductId': productId, 'Quantity': quantity + currentQuantity };
          var str = JSON.stringify(sessionData.order);
          localStorage.order = str;
          $rootScope.vmMenu.toggleCartBadge();
          var repeats = true;
          break
        };
      }
    };
    if (productId != undefined && quantity != undefined && !repeats) {
      sessionData.order.push({ 'ProductId': productId, 'Quantity': quantity });
      var str = JSON.stringify(sessionData.order);
      localStorage.order = str;
      $rootScope.vmMenu.toggleCartBadge();
    };
    $rootScope.vmMenu.toggleCartBadge();
  };


}]);

menuApp.controller("menuFirstCtrl", ["$scope", "$http", "sessionData", "$routeParams", function($scope, $http, sessionData, $routeParams) {
  var vm = this;
  vm.server = sessionData.server;
  var catId = null;
  $scope.$on("$routeChangeSuccess", function () {
    var catId = $routeParams["catId"];
    if (catId == "null") {
      $http({
        method:"GET",
        url: sessionData.server + "Menu/CatMenu",
        params: {
          "restId": sessionData.clubId,
          "catId": catId
        }
      }).success(function(result){
        vm.items = result;
      });
    } else {
      $http({
        method:"GET",
        url: sessionData.server + "Menu/CatMenu",
        params: {
          "restId": sessionData.clubId,
          "catId": catId
        }
      }).success(function(result){
        vm.itemsNext = result.Array;
      });
    };
  });
}]);

menuApp.controller("menuNextCtrl", ["$rootScope", "$scope", "$http", "sessionData", "$routeParams", "menuBounce", function($rootScope, $scope, $http, sessionData, $routeParams, menuBounce) {
  var vm = this;
  vm.bounce = function() {
    menuBounce.badgeBounce();
  };
  $scope.$on("$routeChangeSuccess", function () {
    var catId = $routeParams["catId"];
    if(catId!=='undefined'){
      $http({
        method:'GET',
        url: sessionData.server + 'Menu/CatProd',
        params: {
          "categoryId": catId,
          "sessionId": sessionData.sessionId
        }
      }).success(function(result) {
        vm.items = result.Array;
        vm.parentBlock = result.Parent;
        vm.statusOfPage = result.status;
        vm.parentImage = sessionData.imagePath + "icons/menu/" + result.Logo;
      });
    }
  });
}]);

menuApp.controller("menuLastCtrl", ["$scope", "$http", "sessionData", "$routeParams", "menuBounce", function($scope, $http, sessionData, $routeParams, menuBounce) {
  var vm = this;
  vm.bounce = function() {
    menuBounce.badgeBounce();
  };
  $scope.$on("$routeChangeSuccess", function () {
    var prodId = $routeParams["prodId"];
    if(prodId!=='undefined'){
      $http({
        method:'GET',
        url: sessionData.server + 'Menu/OneProd',
        params: {
          "productId": prodId,
          "sessionId": sessionData.sessionId
        }
      }).success(function(result) {
        vm.info   = result[0];
        vm.Name   = result[0].Name;
        vm.Id     = result[0].Id;
        vm.Parent = result[0].Parent;
        vm.Price  = result[0].Price;
        vm.Weight = result[0].Weight;
        vm.inFavorites = result[0].Favorite;
      });
    }
  });
  vm.addToFavorites = function() {
    $http({
      method:'GET',
      url: sessionData.server + 'Menu/AddProdToFavorite',
      params: {
        "prodId": vm.Id,
        "sessionId": sessionData.sessionId
      }
    }).success(function(result) {
    });
  };
}]);

menuApp.controller("orderCtrl", ['service.orders', "$rootScope", "$scope", "$location", "$http", "$interval", "$timeout", "sessionData", "customFunctions",
  function(orders, $rootScope, $scope, $location, $http, $interval, $timeout, sessionData, customFunctions) {
  var vm = this;
  vm.items = {};
  vm.amountObj = 0;

  vm.addToOrders = orders.addToOrders;

  vm.scrollTop = customFunctions.scrollToTop;

  vm.ifNoOrder = function(){

      if (sessionData.order.length > 0 ) {
        return false;
      } else {
        return true; //если в козине ничего нет, скрываем некоторые пункты
      };

  };

  vm.reordering = false; //настройки типа заказа присутствуют
  //$rootScope.vmm.qrCode = localStorage.qrCodeForNotConfirmedOrder;
  $rootScope.vmm.orderID = localStorage.orderID;
  $rootScope.vmm.orderCode = localStorage.orderCodeForNotConfirmedOrder;
  //функция подсчета общей стоимости
  vm.getCartAmount = function(amountObj) {
    vm.amountObj = 0;
    for ( var x in amountObj ) {
      vm.amountObj = vm.amountObj + amountObj[x];
    }
    return vm.amountObj;
  }
  //проверка наличия уже существующего заказа
  $http({
    method:'GET',
    url: sessionData.server + 'Order/CheckReorder',
    params: {
      "sessionId": sessionData.sessionId
    }
  }).success(function(result) {
    vm.orderOptions = result;
    if (result == true) {//если заказ существует
      vm.reordering = true;
    };
  });

  //получение списка заказанных товаров
  vm.getCartList = function() {

    $http({
      method:'GET',
      url: sessionData.server + 'Order/ProdToBag',
      params: {
        "products": localStorage.order
      }
    }).success(function(result) {
      vm.items = {};
      vm.items = result;
      vm.amount = function(){
        var amountOfDishes = 0;
        for (var i = vm.items.length - 1; i >= 0; i--) {
          amountOfDishes += vm.items[i].Price * vm.items[i].Quantity;
        }
        return amountOfDishes;
      }
    }).error(function(){
      vm.items = {};
      $scope.vmMenu.ifNoOrder = true;
    });

  };
  vm.getCartList();

  vm.getTotal = function(){
    var total = 0;
    for(var i = 0; i < vm.items.length; i++){
        total += (vm.items[i].Price * vm.items[i].Quantity);
    }
    return total;
  };

  vm.method = 0;
  vm.time = {
    hour : 12,
    minute : 00
  }
  vm.timeToTime = false;
  vm.popupShowQr = false;
  vm.popupShowWait = false;
  vm.popupAuthAsk = false;
  vm.openOrder = function(fromOpenOrderWithTelephon) {

    $http({
      method:'GET',
      url: sessionData.server + 'Order/ActiveInactive',
      params: {
        "sessionId" : sessionData.sessionId
      }
    }).success(function(result) {
      if (result == true) {
        $rootScope.vmMenu.hasOpenOrder = false;
      } else {
        $rootScope.vmMenu.hasOpenOrder = true;
      }
    }).error(function(){
      $rootScope.vmMenu.hasOpenOrder = false;
    });

    if(localStorage.getItem('sessionId')) {//проверяем есть ли sessionId, если нет, выдаем поп-ап
      if (localStorage.getItem('agent') && !fromOpenOrderWithTelephon) {//проверяем, если у пользователя временный sessionId, который дается про заказе "по телефону", а также не вызвана ли функция из функции fromOpenOrderWithTelephon
        if (vm.reordering == true) {//если уже открыт заказ, получаем телефон с сервера и делаем дозаказ
          $http({
            method:'GET',
            url: sessionData.server + 'Cabinet/GetUserInfo',
            params: {
              'sessionId' : sessionData.sessionId
            }
          }).success(function(result) {
            vm.phone = result[0].Phone;
            vm.openOrderWithTelephon();
          }).error(function(){
            vm.popupAuthAsk = true;
            vm.telephoneShow = false;
            localStorage.removeItem('sessionId');
            localStorage.removeItem('agent');
          });
        } else {//если открытых заказов нет, то выдаем попап
          vm.popupAuthAsk = true;
          vm.telephoneShow = false;
        };
      } else {//есле нормальный sessionId, то всё как обычно
        vm.timeHM = vm.time.hour + ":" + vm.time.minute;
        if (vm.timeToTime === false) {//если не выбрано время, то сценарий с QR кодом
          vm.timeHM = "";
        };
        $http({
          method:'GET',
          url: sessionData.server + 'Order/OpenOrder',
          params: {
            "sessionId" : sessionData.sessionId,
            "orders" : localStorage.order,
            "typeOrder" : vm.method,
            "pointId" : sessionData.clubId,
            "cookTime" : vm.timeHM,
            "tableNo" : vm.tableNo
          }
        }).success(function(result) {
          if (result != true) {//проверяем нет ли оплаченных, но неподтвержденных заказов.
            vm.getOrdersList();
            localStorage.orderCodeForNotConfirmedOrder = result.code;
            $rootScope.vmm.orderCode = result.code;
            sessionData.orderID = result.OrderId;
            localStorage.orderID = result.OrderId;
            $rootScope.vmMenu.orderID = result.OrderId;
            if (vm.method == 0 || vm.method == 1) {//если человек в ресторане,
              if (vm.timeToTime === true || vm.reordering === true) {//если выбран заказ по времени, или мы имеем дело с дозаказом Qr код не выводим
                vm.popupShowWait = true;
                $scope.vmMenu.waitingForOrderConfirm();
              } else if (sessionData.orderID !== false) {
                vm.popupShowQrPopup();
              };
            };
            if (vm.method == 3) {
              if (sessionData.orderID !== false) {
                $scope.vmMenu.waitingForOrderConfirm();
                vm.popupShowWait = true;
              };
            };
            sessionData.order = [];
            delete localStorage.order;
            $scope.vmMenu.badgeShow = false;
          } else {//если есть оплаченные, но неподтвержденные заказы, выводим поп-ап.
            vm.havePaidButNotClosedOrders = true;
          };
          vm.getCartList();

        });
      };
    } else {
      vm.popupAuthAsk = true;
      vm.telephoneShow = false;
    };
  };
  vm.clearOrder = function(){
    sessionData.order = [];
    delete localStorage.order;
    vm.items = {};
    $scope.vmMenu.badgeShow = false;
  };
  vm.popupShowQrPopup = function () {
    vm.popupShowQr = true;
    //проверяем подтверджен ли заказ, и держим кнопку "оплатить неактивной до подтверждения заказа"
    $scope.vmMenu.waitingForOrderConfirm();
  };
  vm.redirectToMyOrders = function() {
    if ($rootScope.vmMenu.hasOpenOrder == false) {
      $location.path("/my_orders");
    };
  };
  vm.openOrderWithTelephon = function() {
    $http({
      method:'GET',
      url: sessionData.server + 'User/Registration',
      params: {
        "name" : "",
        "password" : "",
        "phone" : vm.phone,
        "email" : ""
      }
    }).success(function(result) {
      if (result.message == "already registered") {
        vm.alreadyRegistred = true;
      } else {
        $scope.vmMenu.waitingForOrderConfirm();
        localStorage.sessionId = result.sessionId;
        sessionData.sessionId = result.sessionId;
        localStorage.agent = true;
        vm.openOrder(true);
        vm.popupAuthAsk = false;
        if (localStorage.sessionId != "undefined" && localStorage.sessionId != undefined ) {
          //тут можно сделать переадресацию
        };
      };
    });
  };
  vm.addToOrder = function(productId, quantity) {
    if (productId != undefined && quantity != undefined) {
      sessionData.order.push({ 'ProductId': productId, 'Quantity': quantity });
      var str = $(sessionData.order).serialize();
      localStorage.order = str;
      $rootScope.vmMenu.toggleCartBadge();
    };
  };
  vm.returnHours = function () {
    var d = new Date();
    var n = d.getHours() + 1;
    return n;
  }
// заказынные товары
  vm.scrollToBottom = function() {
    customFunctions.scrollToBottom();
  };
  if (localStorage.agent == "true") {// проверка на пользователя без регистрации
    vm.notRegistredUser = true;
  }
  $scope.vmMenu.waitingForOrderConfirm();//запуск функции проверки неподтвержденных заказов

  vm.orders = {};

  vm.noOpenedOrder = function() {
    if (vm.orders.length != undefined && vm.orders.length > 0) {
      return false;
    }
    return true; //если заказов нет, скрываем некоторые пункты
  }

  $rootScope.vmMenu.orderHasBeenPaid = false;

  vm.getOrdersList = function(){

    $http({
      method:'GET',
      url: sessionData.server + 'Cabinet/OrderInfo',
      params: {
        "orderId" : sessionData.orderID,
        "sessionId" : sessionData.sessionId
      }
    }).success(function(result) {
      if (result.OpenClose == 0) {//преверяем открыт или закрыт заказ. 0 — открыт
        vm.orders = {};
        vm.orders = result.Orders.reverse();
        //вписать номер заказа
        if (result.TypeOfPayment != null) { //если заказ уже оплачен, запрещаем пользователю открывать новые заказы, дозаказывать, и т.д.
          $rootScope.vmMenu.orderHasBeenPaid = true;
        }
      }
    })

  };
  vm.getOrdersList();

  vm.getAmount = function(amountObj) {

    vm.amountObj = 0;

    for ( var x in amountObj ) {
      vm.amountObj = vm.amountObj + amountObj[x];
    }

    return vm.amountObj;

  }

  vm.askPrice = function(payMethod) {
    if (!$scope.vmMenu.hasOpenOrder && !$scope.vmMenu.orderHasBeenPaid) {
      vm.paymantVariantsShow = true;

      if (payMethod == 0) {
        vm.popupCashPayment = true;
        //TODO добавить сюда вызов официанта каким-то образом
      };

      if (payMethod == 1) {
        $location.path("/card_payment");
      };

      //оплата бонусами
      if (payMethod == 2) {
        //запрос на интач бар
        $http({
          method:'GET',
          url: sessionData.server + 'Order/ReduceBonusByPurchase',
          params: {
            "userId"  : $scope.vmm.userId,
            "pointId" : $scope.vmm.globalPoint,
            "amount"  : vm.getAmount(vm.amount)
          }
        }).success(function(result) {
          if (result.search(/true/i) != -1) {

            //если операция прошла в интач баре, выполняем запрос на оплату бонусами в приложении
            $http({
              method:'GET',
              url: sessionData.server + 'Order/PaymentByBonus',
              params: {
                "orderId"   : sessionData.orderID,
                "sessionId" : sessionData.sessionId,
                "orderSum"  : vm.getAmount(vm.amount)
              }
            }).success(function(result) {
              vm.popupBonusPaymentSuccess = true;
            }).error(function() {
              alert("Ошибка!");
            });
          } else {
            vm.popupLowBonuses = true;
          }
        });
      };
    };
  };

}]);

menuApp.controller("cardCtrl", ["$scope", "$http", "$timeout", "$location", "sessionData", function($scope, $http, $timeout, $location, sessionData) {

  var vm = this;

  if (localStorage.agent == "true") {// проверка на пользователя без регистрации
    vm.notRegistredUser = true;
  }

  $http({
    method:'GET',
    url: sessionData.server + 'Order/GetOrderSum',
    params: {
      "orderId"   : sessionData.orderID,
      "sessionId" : sessionData.sessionId
    }
  }).success(function(result) {
    vm.orderAmount = result;
  });

  //выполняем в самом конце, когда оплата картой прошла успешно
  vm.paymentSuccess = function(){
    $http({
      method:'GET',
      url: sessionData.server + 'Order/PaymentByCard',
      params: {
        "orderId"   : sessionData.orderID,
        "sessionId" : sessionData.sessionId,
        "orderSum"  : vm.orderAmount
      }
    }).success(function(result) {
      vm.bonusAmount = result;
      vm.popupBonusesShow = true;
    });
    //часть для Интач бара
    $http({
      method:'GET',
      url: sessionData.server + 'Order/AddBonusByPurchase',
      params: {
        "userId"  : $scope.vmm.userId,
        "pointId" : $scope.vmm.globalPoint,
        "amount"  : vm.orderAmount
      }
    }).success(function(result) {
      //TODO обработка ошибки!!!
    });

  };
}]);

menuApp.controller("favoritesCtrl", ["$scope", "$http", "$location", "sessionData", "menuBounce", function($scope, $http, $location, sessionData, menuBounce) {
  var vm = this;
  vm.bounce = function() {
    menuBounce.badgeBounce();
  };
  vm.noSessionId = false;
  vm.noFavorites = false;
  $http({
    method:'GET',
    url: sessionData.server + 'Menu/GetFavorite',
    params: {
      "sessionId": sessionData.sessionId
    }
  }).success(function(result) {
    vm.items = result;
    if (vm.items.length == 0) {
      vm.noFavorites = true;
    };
  }).error(function(){
    vm.noSessionId = true;
  });
}]);


menuApp.directive('ngFavorites', ["$timeout", "$http", "menuData", "sessionData", "$location", function($timeout, $http, menuData, sessionData, $location) {
  return {
    restrict: "A",
    scope: {},
    link: function($scope, $element, $attrs) {
    if (!localStorage.getItem('sessionId')) {//если у пользователя нет sessionId, он не может добавлять в избранное
      $($element).hide();
    };
  //описываем функции удаления или добавления в избранное. Далее проверяем страницу для того что нам нужно, добавление или удаление.
  var removeFromFavorites = function() {
    $($element).on("click", function(e){
      e.stopPropagation();
      $http({
        method:'GET',
        url: sessionData.server + 'Menu/RemoveProdFromFavorite',
        params: {
          "sessionId": sessionData.sessionId,
          "prodId": $attrs.ngFavorites
        }
      }).success(function(result) {
        if (result == true) {
          $($element).fadeOut(10, function(){
            $($element).toggleClass("out-of-favorites");
          });
          $($element).fadeIn();
        };
      });
    });
  };
  var addToFavorites = function() {
    $($element).on("click", function(e){
      e.stopPropagation();
      $http({
        method:'GET',
        url: sessionData.server + 'Menu/AddProdToFavorite',
        params: {
          "prodId": $attrs.ngFavorites,
          "sessionId": sessionData.sessionId
        }
      }).success(function(result) {
        $($element).fadeOut(10, function(){
          $($element).toggleClass("out-of-favorites");
        });
        $($element).fadeIn();
      });
    });
  };
  //проверка на то какую функцию вызывать, удаление или добавление в избранное
    var checkVariableForTrackPage;
    var str = location.hash;
    var pagesWhereWeNeedDeleteMethod = 
    [
    "/favorites"
    ];
      for (var i = pagesWhereWeNeedDeleteMethod.length - 1; i >= 0; i--) {
        checkVariableForTrackPage = str.search(pagesWhereWeNeedDeleteMethod[i]);
        if (checkVariableForTrackPage !== -1) {
          removeFromFavorites();
        } else {
          $timeout(addToFavorites, 0);
        };
      }
    }
  }
}]);

menuApp.directive('ngDeleteButton', [ function() {
  return {
    restrict: "A",
    scope: {},
    link: function($scope, $element, $attrs) {
      $($element).on("click", function(){
        var quantity = parseInt($($element).prev(".quantity").find(".cart-count-number").val());
        var minus = $($element).prev(".quantity").find(".minus");
        for (var i = quantity - 1; i >= 0; i--) {
          minus.trigger("click");
        }
      });
    }
  }
}]);

menuApp.directive('ngActiveElement', [ function() {
  return {
    restrict: "A",
    scope: {},
    link: function($scope, $element, $attrs) {
      $($element).on("mousedown", function(){
        $(this).addClass("tap");
      });
      $($element).on("mouseup", function(){
        var that = this;
        setTimeout(function() {$(that).removeClass("tap")}, 500);
      });
    }
  }
}]);

menuApp.value('menuData', {
  "arrayOfFavoritId" : []
});
restaurantApp.service('menuBounce', function(){
  var parentObj = {
    badgeBounce : function(){
      $(".cart .badge").toggleClass("bounce");
      setTimeout(function(){$(".cart .badge").toggleClass("bounce")},500)
    }
  }
  return parentObj;
});

menuApp.service("service.orders", ["$rootScope", "sessionData", function($rootScope, sessionData){

  var parentObj =
  {
    "addToOrders": function($event, state, productId, index) {

      var repeats = false;//флаг повторов на "false"

      for (var i = sessionData.order.length - 1; i >= 0; i--) {
        for (key in sessionData.order[i]) {
          if (sessionData.order[i].ProductId == productId) {
            sessionData.order[i].Quantity++
            //sessionData.order[i] = { 'ProductId': productId, 'Quantity': quantity }
            var str = JSON.stringify(sessionData.order);
            localStorage.order = str;
            $rootScope.vmMenu.toggleCartBadge();
            var repeats = true;
            break
          }
          ;
        }
      };

      if (!repeats) {
        sessionData.order.push({'ProductId': productId, 'Quantity': 1});
        var str = JSON.stringify(sessionData.order);
        localStorage.order = str;
        $rootScope.vmMenu.toggleCartBadge();
      };

      $rootScope.vmMenu.toggleCartBadge();
    }
  }
  return parentObj;
}]);