using Intouch.Core;
using System;
using System.Data.Entity;
using System.Linq;
using System.Security.Cryptography;
using System.Web.Mvc;

namespace Intouch.Restaurant.Controllers
{
    public class PersonalController : BaseController
    {
        //фидбек на отзыв
        public JsonResult FeedbackToReview(int reviewId, string comment)
        {
            var review = db.RestReviews.SingleOrDefault(s => s.Id == reviewId);
            if (review == null) return Json(false, JsonRequestBehavior.AllowGet);
            review.AdminFeedBack = comment;
            review.AdminFeedBackDate = DateTimeOffset.UtcNow;
            db.Entry(review).State = EntityState.Modified;
            return Json(true, JsonRequestBehavior.AllowGet);
        }
        public JsonResult ConfirmOrder(int orderPartId)
        {
            var orderPart = db.RestOrderParts.SingleOrDefault(o => o.Id == orderPartId);
            if (orderPart == null) return Json(false, JsonRequestBehavior.AllowGet);
            orderPart.ValidPurchase = ValidPurchase.Confirmed;
            db.Entry(orderPart).State = EntityState.Modified;
            db.SaveChanges();
            return Json(true, JsonRequestBehavior.AllowGet);
        }
        public JsonResult OrderInfo(int? orderId, Guid sessionId)
        {
            if (orderId.HasValue)
            {
                var order = db.RestOrders.Where(o => o.Id == orderId).Select(s => new
                {
                    Id = s.Id,
                    DateCreateYear = s.DateCreate.Year,
                    DateCreateMonth = s.DateCreate.Month,
                    DateCreateDay = s.DateCreate.Day,
                    DateCreateHour = s.DateCreate.Hour,
                    DateCreateMin = s.DateCreate.Minute,
                    DateCreate = s.DateCreate,
                    OrderNumber = s.OrderNumber,
                    OpenClose = s.OpenClose,
                    TypeOfPayment = s.TypeOfPayment,
                    BonusThisTime = s.BonusThisTime,
                    WaiterComment = s.WaiterComment,
                    Orders = db.RestOrderParts.Where(a => a.RestOrder.Id == s.Id).Select(r => new
                    {
                        Id = r.Id,
                        DateYear = r.Date.Year,
                        DateMonth = r.Date.Month,
                        DateDay = r.Date.Day,
                        DateHour = r.Date.Hour,
                        DateMin = r.Date.Minute,
                        Date = r.Date,
                        Comment = r.Comment,
                        CookTime = r.CookTime,
                        ValidPurchase = (ValidPurchase)r.ValidPurchase,
                        TypeOfOrder = (TypeOfOrder)r.TypeOfOrder,
                        Products = db.RestOrderProducts.Where(p => p.RestOrderPart.Id == r.Id).Select(p => new
                        {
                            Id = p.Id,
                            Name = p.RestProduct.Name,
                            ProdId = p.RestProduct.Id,
                            Description = p.RestProduct.Description,
                            Weight = p.RestProduct.Weight,
                            Image = (p.RestProduct.Image != null) ? p.RestProduct.Image : p.RestProduct.Category.Image,
                            //Image = (Image != null) ? p.RestProduct.Image : (p.)
                            Quantity = p.Quantity,
                            Price = p.Price,
                        })
                    })
                }).FirstOrDefault();
                return Json(order, JsonRequestBehavior.AllowGet);
            }
            else
            {
                var session = db.RestAppSessions.SingleOrDefault(s => s.Id == sessionId);
                if (session == null) return Json(false, JsonRequestBehavior.AllowGet);
                var user = session.RestAppUser;

                var order = db.RestOrders.Where(o => o.RestAppUser.Id == user.Id && o.OpenClose == OpenClose.Open).OrderByDescending(d => d.DateCreate).Select(s => new
                {
                    Id = s.Id,
                    DateCreateYear = s.DateCreate.Year,
                    DateCreateMonth = s.DateCreate.Month,
                    DateCreateDay = s.DateCreate.Day,
                    DateCreateHour = s.DateCreate.Hour,
                    DateCreateMin = s.DateCreate.Minute,
                    DateCreate = s.DateCreate,
                    OpenClose = s.OpenClose,
                    OrderNumber = s.OrderNumber,
                    TypeOfPayment = s.TypeOfPayment,
                    BonusThisTime = s.BonusThisTime,
                    WaiterComment = s.WaiterComment,
                    Array = db.RestOrderParts.Where(a => a.RestOrder.Id == s.Id).Select(r => new
                    {
                        Id = r.Id,
                        DateYear = r.Date.Year,
                        DateMonth = r.Date.Month,
                        DateDay = r.Date.Day,
                        DateHour = r.Date.Hour,
                        DateMin = r.Date.Minute,
                        Date = r.Date,
                        Comment = r.Comment,
                        CookTime = r.CookTime,
                        ValidPurchase = r.ValidPurchase,
                        TypeOfOrder = r.TypeOfOrder,
                        Array = db.RestOrderProducts.Where(p => p.RestOrderPart.Id == r.Id).Select(p => new
                        {
                            Id = p.Id,
                            Name = p.RestProduct.Name,
                            ProdId = p.RestProduct.Id,
                            Description = p.RestProduct.Description,
                            Weight = p.RestProduct.Weight,
                            Image = p.RestProduct.Image,
                            Quantity = p.Quantity,
                            Price = p.Price,
                        })
                    })
                }).FirstOrDefault();
                return Json(order, JsonRequestBehavior.AllowGet);
            }
        }
        public JsonResult AddOfficiantToOrder(int orderPartId, Guid sessionId)
        {
            var session = db.RestAppSessions.SingleOrDefault(s => s.Id == sessionId);
            if (session == null) return Json(false, JsonRequestBehavior.AllowGet);
            var user = session.RestAppUser;

            var order = db.RestOrders.SingleOrDefault(o => o.RestOrderParts.Any(p => p.Id == orderPartId));
            if (order == null) return Json(false, JsonRequestBehavior.AllowGet);
            if (order.Officiant == null)
            {
                order.Officiant = user;
                db.Entry(order).State = EntityState.Modified;
                db.SaveChanges();
                return Json(true, JsonRequestBehavior.AllowGet);
            }
            return null;
        }
        public JsonResult CheckAdminBySessionId(Guid sessionId)
        {
            var session = db.RestAppSessions.SingleOrDefault(s => s.Id == sessionId);
            if (session == null)
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
            var user = session.RestAppUser;
            if (user.Role == RestRole.User)
            {
                return Json(false, JsonRequestBehavior.AllowGet);
            }
            return Json(true, JsonRequestBehavior.AllowGet);
        }
        public JsonResult CloseOrderByCash(int orderId, decimal mount)
        {
            var order = db.RestOrders.SingleOrDefault(o => o.Id == orderId);
            if (order == null) return Json(false, JsonRequestBehavior.AllowGet);
<<<<<<< HEAD
            var user = order.RestAppUser;
            var result = BonusOperation(Convert.ToInt32(mount), user.Id, Operation.Order, PlusMinus.Plus);
            if (result)
            {
                var close = CloseOrder(orderId, 0);
                if (close)
                {
                    return Json(true, JsonRequestBehavior.AllowGet);
                }
            }
            return Json(false, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetOffTable(Guid sessionId)
        {
            var session = db.RestAppSessions.SingleOrDefault(s => s.Id == sessionId);
            if (session == null) return Json(false, JsonRequestBehavior.AllowGet);
            var officiant = session.RestAppUser;

            var orders = db.RestOrders.Where(o => o.Officiant.Id == officiant.Id && o.OpenClose == OpenClose.Open).Select(s => new
            {
                Id = s.Id,
                DateCreateYear = s.DateCreate.Year,
                DateCreateMonth = s.DateCreate.Month,
                DateCreateDay = s.DateCreate.Day,
                DateCreateHour = s.DateCreate.Hour,
                DateCreateMin = s.DateCreate.Minute,
                DateCreate = s.DateCreate,
                OpenClose = s.OpenClose,
                OrderNumber = s.OrderNumber,
                TypeOfPayment = s.TypeOfPayment,
                BonusThisTime = s.BonusThisTime,
                WaiterComment = s.WaiterComment,
                Orders = db.RestOrderParts.Where(a => a.RestOrder.Id == s.Id).Select(r => new
                {
                    Id = r.Id,
                    DateYear = r.Date.Year,
                    DateMonth = r.Date.Month,
                    DateDay = r.Date.Day,
                    DateHour = r.Date.Hour,
                    DateMin = r.Date.Minute,
                    Date = r.Date,
                    Comment = r.Comment,
                    CookTime = r.CookTime,
                    ValidPurchase = (ValidPurchase)r.ValidPurchase,
                    TypeOfOrder = (TypeOfOrder)r.TypeOfOrder,
                    Products = db.RestOrderProducts.Where(p => p.RestOrderPart.Id == r.Id).Select(p => new
                    {
                        Id = p.Id,
                        Name = p.RestProduct.Name,
                        ProdId = p.RestProduct.Id,
                        Description = p.RestProduct.Description,
                        Weight = p.RestProduct.Weight,
                        Image = (p.RestProduct.Image != null) ? p.RestProduct.Image : p.RestProduct.Category.Image,
                        Quantity = p.Quantity,
                        Price = p.Price,
                    })
                })
            });
            return Json(orders, JsonRequestBehavior.AllowGet);
        }
        public JsonResult OneOrderPart(int orderPartId)
        {
            var orderPart = db.RestOrderParts.Where(o => o.Id == orderPartId).Select(s => new
            {
                Id = s.Id,
                DateYear = s.Date.Year,
                DateMonth = s.Date.Month,
                DateDay = s.Date.Day,
                DateHour = s.Date.Hour,
                DateMin = s.Date.Minute,
                Date = s.Date,
                Comment = s.Comment,
                CookTime = s.CookTime,
                ValidPurchase = (ValidPurchase) s.ValidPurchase,
                TypeOfOrder = (TypeOfOrder) s.TypeOfOrder,
                Products = db.RestOrderProducts.Where(p => p.RestOrderPart.Id == s.Id).Select(p => new
                {
                    Id = p.Id,
                    Name = p.RestProduct.Name,
                    ProdId = p.RestProduct.Id,
                    Description = p.RestProduct.Description,
                    Weight = p.RestProduct.Weight,
                    Image = (p.RestProduct.Image != null) ? p.RestProduct.Image : p.RestProduct.Category.Image,
                    Quantity = p.Quantity,
                    Price = p.Price,
                })
            }).FirstOrDefault();
            return Json(orderPart, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetOrderByPart(int orderPartId)
        {
            var order = db.RestOrders.Where(o => o.RestOrderParts.Any(rop => rop.Id == orderPartId)).Select(s => new
            {
                Id = s.Id,
                DateCreateYear = s.DateCreate.Year,
                DateCreateMonth = s.DateCreate.Month,
                DateCreateDay = s.DateCreate.Day,
                DateCreateHour = s.DateCreate.Hour,
                DateCreateMin = s.DateCreate.Minute,
                DateCreate = s.DateCreate,
                OpenClose = s.OpenClose,
                OrderNumber = s.OrderNumber,
                TypeOfPayment = s.TypeOfPayment,
                BonusThisTime = s.BonusThisTime,
                WaiterComment = s.WaiterComment,
                Orders = db.RestOrderParts.Where(a => a.RestOrder.Id == s.Id).Select(r => new
                {
                    Id = r.Id,
                    DateYear = r.Date.Year,
                    DateMonth = r.Date.Month,
                    DateDay = r.Date.Day,
                    DateHour = r.Date.Hour,
                    DateMin = r.Date.Minute,
                    Date = r.Date,
                    Comment = r.Comment,
                    CookTime = r.CookTime,
                    ValidPurchase = r.ValidPurchase,
                    TypeOfOrder = r.TypeOfOrder,
                    Products = db.RestOrderProducts.Where(p => p.RestOrderPart.Id == r.Id).Select(p => new
                    {
                        Id = p.Id,
                        Name = p.RestProduct.Name,
                        ProdId = p.RestProduct.Id,
                        Description = p.RestProduct.Description,
                        Weight = p.RestProduct.Weight,
                        Image = p.RestProduct.Image,
                        Quantity = p.Quantity,
                        Price = p.Price,
                    })
                })
            }).FirstOrDefault();
            return Json(order, JsonRequestBehavior.AllowGet);
        }
        public JsonResult DelProdFromOrder(int prodId, int orderPartId)
        {
            var orderPart = db.RestOrderParts.SingleOrDefault(o => o.Id == orderPartId);
            if(orderPart == null) return Json(false, JsonRequestBehavior.AllowGet);

            var product = db.RestOrderProducts.SingleOrDefault(p => p.Id == prodId);
            if (product == null) return Json(false, JsonRequestBehavior.AllowGet);
            db.RestOrderProducts.Remove(product);
=======
            order.Officiant = user;
            db.Entry(order).State = EntityState.Modified;
>>>>>>> 8123fad9a1c440036d485987d6da0c1843534cca
            db.SaveChanges();
            return Json(true, JsonRequestBehavior.AllowGet);
        }
    }
}